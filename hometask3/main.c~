//Реализовать быструю сортировку массива целых чисел, используя OpenMP.
//В программе должны быть методы, позволяющие выполнить сортировку в последовательном режиме, в параллельном режиме,
//программа должна печатать время работы, потребовавшееся для сортировки массива.
//Массив заполняется случайными целыми числами.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <omp.h>

void quickSort(int* arr, int first, int last)
{
    int i = first, j = last, x = arr[(first + last) / 2];

    do {
        while (arr[i] < x) i++;
        while (arr[j] > x) j--;

        if(i <= j) {
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            i++;
            j--;
        }
    } while (i <= j);

    if (i < last)
        quickSort(arr, i, last);
    if (first < j)
        quickSort(arr, first, j);
}

void quickSortParallel(int* arr, int first, int last)
{
#pragma omp parallel sections
    {
#pragma omp section
        quickSort(arr, first, last / 2 - 1);
#pragma omp section
        quickSort(arr , last / 2, last - 1);
    }

}

int main(void)
{
    int i;
//    int N = 18000000;
    int N = 19500000;
    int *arr;
    arr = (int *) malloc(sizeof(int) * N);
    for(i = 0; i < N; i++) {
        arr[i] = rand() % 50;
    }
    double t1, t2;
    t1 = omp_get_wtime();
    quickSort(arr, 0, N - 1);
    t2 = omp_get_wtime();
    printf("%f  it is 1 thread \n", t2-t1 );

    for(i = 0; i < N; i++) {
        arr[i] = rand() % 50;
    }

    t1 = omp_get_wtime();
    quickSortParallel(arr, 0, N);
    t2 = omp_get_wtime();
    printf("%f it is 2 thread \n", t2-t1);

    
    return 0;
}

